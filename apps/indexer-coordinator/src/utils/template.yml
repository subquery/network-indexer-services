version: "3"

services:
  node_{{projectID}}:
    image: {{dockerRegistry}}:{{nodeVersion}}
    container_name: node_{{projectID}}
    user: "1000"
    restart: always
    cpus: {{cpu}}
    expose:
      - {{servicePort}}
    environment:
      DB_USER: "{{postgres.user}}"
      DB_PASS: "{{postgres.pass}}"
      DB_DATABASE: "{{postgres.db}}"
      DB_HOST: {{postgres.host}}
      DB_PORT: {{postgres.port}}
    volumes:
      - {{mmrPath}}/poi/{{deploymentID}}:{{mmrPath}}/poi/{{deploymentID}}
      {{#if hostCertsPath}}
      - {{hostCertsPath}}:{{certsPath}}
      {{/if}}
    command:
      - -f=ipfs://{{deploymentID}}
      - -d={{networkDictionary}}
      - --ipfs={{ipfsUrl}}
      {{#each networkEndpoints}}
      - --network-endpoint={{{this}}}
      {{/each}}
      {{#if usePrimaryNetworkEndpoint}}
      {{#if (ge networkEndpoints.length 2)}}
      - --primary-network-endpoint={{{primaryNetworkEndpoint}}}
      {{/if}}
      {{/if}}
      - --db-schema={{dbSchema}}
      - --port={{servicePort}}
      - --batch-size={{batchSize}}
      - --timeout={{timeout}}
      - --workers={{worker}}
      - --store-cache-threshold={{cache}}
      - --proof-of-index=true
      - --mmr-store-type={{mmrStoreType}}
      - -m={{mmrPath}}/poi/{{deploymentID}}/.mmr
      - --disable-historical=false
      {{#if (eq chainType "ethereum")}}
      - --block-confirmations=100
      {{/if}}
      {{#if hostCertsPath}}
      - --pg-ca={{pgCa}}
      - --pg-key={{pgKey}}
      - --pg-cert={{pgCert}}
      {{/if}}
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-f",
          "http://node_{{projectID}}:{{servicePort}}/ready"
        ]
      interval: 3s
      timeout: 5s
      retries: 100

  query_{{projectID}}:
    image: onfinality/subql-query:{{queryVersion}}
    container_name: query_{{projectID}}
    user: "1000"
    expose:
      - {{servicePort}}
    depends_on:
      "node_{{projectID}}":
        condition: service_healthy
    restart: always
    environment:
      DB_USER: "{{postgres.user}}"
      DB_PASS: "{{postgres.pass}}"
      DB_DATABASE: "{{postgres.db}}"
      DB_HOST: {{postgres.host}}
      DB_PORT: {{postgres.port}}
    command:
      - --name={{dbSchema}}
      - --playground
      - --indexer=http://node_{{projectID}}:{{servicePort}}
      - --port={{servicePort}}
      - --query-limit=2000
      {{#if hostCertsPath}}
      - --pg-ca={{pgCa}}
      - --pg-key={{pgKey}}
      - --pg-cert={{pgCert}}
      {{/if}}

networks:
  default:
    name: {{dockerNetwork}}
